### 2024년 11월 ~ 2025년 9월 Flutter 주요 변경 사항 요약

#### 1. 핵심 아키텍처 및 성능
*   **Impeller 렌더링 엔진이 기본값으로 전환:**
    *   Android에서는 Impeller가 기본 렌더링 엔진이 되었으며, Vulkan을 지원하지 않는 구형 기기를 위해 OpenGLES 폴백(fallback)을 제공하여 사실상 100%의 기기를 지원합니다.[1, 2]
    *   iOS 빌드에서는 Skia 렌더링 엔진이 완전히 제거되어, 이제 Impeller가 유일한 렌더링 엔진입니다. 이로 인해 앱의 바이너리 크기가 감소했습니다.[2, 3]
*   **'Dart on the Main Thread' 아키텍처 도입:**
    *   가장 중대한 아키텍처 변경으로, iOS와 Android에서 별도의 UI 스레드가 사라지고 Dart 코드가 플랫폼의 메인 스레드에서 직접 실행됩니다.[2, 4, 5]
    *   이 변화로 인해 네이티브 코드와의 동기적(synchronous) 호출이 가능해져 플랫폼 채널의 직렬화 오버헤드가 줄어들고, 플러그인 개발 및 'add-to-app' 시나리오의 성능과 복잡성이 크게 개선되었습니다.[2]

#### 2. 프레임워크 및 위젯
*   **테마 시스템 정규화 완료:**
    *   `CardTheme`, `DialogTheme`, `AppBarTheme` 등 여러 컴포넌트 테마가 새로운 데이터 기반 클래스(`CardThemeData` 등)를 사용하도록 리팩토링되었습니다. 이는 주요 변경 사항(breaking change)으로, 기존 테마 관련 코드의 마이그레이션이 필요할 수 있습니다.[1, 6]
*   **주요 위젯 업데이트 및 추가:**
    *   `Row` 및 `Column` 위젯에 자식 위젯 간의 간격을 쉽게 조절할 수 있는 `spacing` 매개변수가 추가되었습니다.[1, 7]
    *   Cupertino 위젯들이 대대적으로 업데이트되어 iOS 네이티브 UI와의 충실도가 크게 향상되었습니다.[1]
    *   접근성 향상을 위해 `Radio` 관련 위젯이 재설계되었으며, 상태 관리를 위한 새로운 `RadioGroup` 위젯 사용이 권장됩니다.[6]
    *   iOS 스타일의 둥근 사각형인 '스쿼클(squircles)' 형태와 확장/축소가 가능한 `Expansible` 위젯이 추가되었습니다.[8, 9]

#### 3. Dart 언어 (3.6 ~ 3.9)
*   **주요 문법 추가:**
    *   **Dart 3.6:** 긴 숫자 리터럴의 가독성을 높이기 위한 자릿수 구분 기호(`_`)가 도입되었습니다 (예: `1_000_000`).[10]
    *   **Dart 3.7:** 사용하지 않는 변수나 매개변수를 명시적으로 무시하기 위한 와일드카드 변수(`_`)가 추가되었습니다.[10]
    *   **Dart 3.8:** 컬렉션 리터럴 내에서 널(null)이 아닐 경우에만 요소를 추가하는 Null-Aware 요소(예: ``)가 도입되어 코드가 더 간결해졌습니다.[11, 10]
*   **도구 개선:**
    *   Dart 포맷터에 새로운 'tall style'이 도입되어 인수 목록이 길어질 때 자동으로 후행 쉼표를 관리해 줍니다.[10]
    *   실제 `import` 없이 문서 주석 내에서 외부 요소를 참조할 수 있는 'doc imports' 기능이 추가되었습니다.[12, 13]

#### 4. 개발자 도구 및 AI
*   **AI 기반 개발의 본격화:**
    *   Android Studio에 통합된 **Gemini AI**가 Dart와 Flutter를 완벽하게 지원하여, IDE 내에서 코드 생성, 리팩토링, 디버깅 지원 등을 받을 수 있습니다.[12, 14]
    *   새로운 **`firebase_ai` 패키지**를 통해 Gemini와 같은 생성형 AI 모델을 서버 없이 Flutter 앱에 직접 통합할 수 있게 되었습니다.[12, 8]
*   **DevTools 기능 혁신:**
    *   **Flutter Property Editor**가 추가되어, 코드를 수정하지 않고 DevTools UI에서 직접 위젯의 속성(패딩, 색상 등)을 시각적으로 편집하고 실시간으로 변경 사항을 확인할 수 있습니다.[12, 9]
    *   모바일 앱의 딥링킹 설정을 검증하고 디버깅하는 **Deep Link Validator**가 추가되었습니다.[15, 16]
    *   Inspector와 로깅 도구가 재설계되어 성능이 향상되고 더 많은 필터링 옵션을 제공합니다.[2, 4]

#### 5. 플랫폼별 주요 업데이트
*   **웹(Web):**
    *   가장 많이 요청되었던 기능인 **웹용 Stateful Hot Reload가 안정화**되어, 모바일 개발과 유사한 수준의 생산성을 제공합니다.[6]
    *   레거시 HTML 렌더러가 제거되었으며, 이제 WebAssembly(Wasm)와 CanvasKit이 Flutter 웹의 핵심 렌더링 기술입니다.[2, 4]
*   **iOS:**
    *   **Swift Package Manager(SPM) 지원이 안정화**되어, 기존의 CocoaPods 의존성을 줄이고 최신 iOS 개발 워크플로우와 더 잘 통합됩니다.[1, 3, 17]
*   **Android:**
    *   최신 기기에서 몰입감 있는 UI를 제공하는 **Edge-to-Edge 디스플레이 모드가 기본값으로 채택**되었습니다.[1, 18]
    *   Flutter Gradle 플러그인이 Groovy에서 Kotlin으로 재작성되어 최신 Android 개발 표준을 따릅니다.[9, 17]

#### 6. 상태 관리
*   **Riverpod 3.0 출시:**
    *   상태 관리 생태계에서 가장 큰 변화로, Riverpod 3.0이 출시되었습니다.
    *   `StateProvider`, `ChangeNotifierProvider`와 같은 레거시 프로바이더들이 별도의 라이브러리로 분리되는 등 여러 주요 변경 사항(breaking changes)이 있었습니다.[19]
    *   오프라인 지원, 뮤테이션(Mutation) 추적, 자동 재시도 등 실험적인 고급 기능들이 도입되었습니다.[19]
*   **BLoC 및 Provider:**
    *   이 두 패키지는 주로 안정성 강화, 의존성 업데이트, 버그 수정 등 점진적인 개선에 초점을 맞추었습니다.[20, 21]