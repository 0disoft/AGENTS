### **1. AI는 부조종사가 아니라 조종사다**

니가 알아야 될 가장 중요한 사실이다. 2024년의 AI 코딩 도우미는 똑똑한 자동완성 수준이었지. 하지만 2025년의 AI는 **코드를 '작성'하는 게 아니라 '설계'를 제안하고 '리팩토링'을 주도**한다.

* **구닥다리 방식:** 개발자가 머리 싸매고 로직을 짜면 AI가 일부 코드를 생성해주는 식.
* **2025년 방식:** 개발자는 "회원가입 API 만들어줘. 데이터베이스는 NeonDB 쓰고 인증은 Clerk으로 해." 라고 **요구사항만 말한다.** 그럼 AI가 전체 구조, 코드, 테스트 케이스까지 한 번에 내놓는다. 인간은 그걸 보고 전체적인 아키텍처가 맞는지 검토하고 수정할 뿐이다.

넌 이제 코드 한 줄 한 줄 짜는 노동자가 아니다. AI라는 신입 개발자에게 정확한 지시를 내리는 **프로젝트 매니저**나 **아키텍트**가 되어야 한다.

---

### **2. '서버리스'는 기본값이다**

2024년까진 서버리스를 '특수한 경우'에 쓰는 아키텍처로 생각했겠지. 틀렸다. 지금은 **서버리스가 표준**이고, 롱러닝 서버를 쓰는 게 오히려 특별한 이유가 필요한 상황이 됐다.

이게 왜 중요하냐면, 데이터베이스 연결 방식의 근본이 바뀌었기 때문이다. 니가 알던 '서버 켜지면 DB 커넥션 풀 만들고 요청 처리' 방식은 서버리스에선 재앙이다. 함수 하나 호출될 때마다 DB 커넥션을 새로 맺는 짓은 데이터베이스를 죽이는 것과 같다.

그래서 니가 받은 자료에 나온 **Prisma Accelerate** 같은 **커넥션 풀러 서비스**가 대세가 된 거다. 애플리케이션은 DB에 직접 말 거는 게 아니라, 중간에 있는 프록시에 말을 건다. 이 프록시가 DB와의 연결을 알아서 관리해준다. 이건 선택이 아니라 필수다.

서버리스 DB에 직접 연결하는 **서버리스 드라이버**도 마찬가지 이유다. TCP 대신 HTTP로 통신해서 불필요한 연결 과정을 없애버리는 거다. 니 머릿속에 'DB 연결=TCP'라는 공식이 있다면 당장 지워라.

---

### **3. 실시간 기능은 더 이상 비싼 기술이 아니다**

예전엔 실시간 채팅이나 알림 기능을 만들려면 WebSocket, 메시지 큐(Kafka 등) 같은 복잡한 걸 덕지덕지 붙여야 했다. 배보다 배꼽이 더 컸지.

지금은 아니다. 니가 본 **Prisma Pulse**가 대표적인 예다. 그냥 API 한 줄 호출하면 데이터베이스에 변화가 생길 때마다 알아서 알려준다. 개발자는 더 이상 복잡한 인프라를 구축하고 관리할 필요가 없다. 그냥 '구독'만 하면 끝이다.

이 말은, 이제 **모든 서비스에 실시간 기능이 기본으로 들어갈 수 있다**는 뜻이다. 실시간 기능이 없으면 오히려 이상한 서비스 취급받는 시대가 됐다.

---

### **4. 프론트엔드와 백엔드의 경계가 무너졌다**

니가 알던 '백엔드는 API 만들고, 프론트엔드는 그거 호출해서 화면 그리기' 모델은 낡았다. React 서버 컴포넌트(RSC) 같은 기술이 주류가 되면서 프론트엔드 코드처럼 보이는 것이 사실은 서버에서 돌아간다.

* **구닥다리 방식:** 클라이언트에서 `useEffect` 써서 로딩 스피너 돌리며 데이터 가져오기.
* **2025년 방식:** 컴포넌트 자체가 서버에서 데이터를 다 채워서 완성된 HTML로 클라이언트에 날아온다. 클라이언트는 그걸 받아서 보여주기만 한다.

이제 프론트엔드 개발자도 데이터베이스 쿼리, 캐싱, 서버 환경을 모르면 반쪽짜리다. 백엔드 개발자도 컴포넌트 렌더링 원리를 모르면 성능 문제를 해결할 수 없다. **풀스택이 기본 소양**이 된 거다.
