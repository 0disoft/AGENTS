2024년 10월 이후, 특히 2025년 9월에 릴리스된 **v1.4 "Supersymmetry"**를 기점으로 Elysia.js는 프레임워크의 철학과 아키텍처에 있어 중대한 발전을 이루었습니다. 이전 버전의 지식으로 코드를 생성할 경우 호환되지 않거나 최적의 패턴을 따르지 못할 수 있습니다.

다음은 반드시 숙지해야 할 핵심 변경 사항 목록입니다.

*   **1. 유효성 검사 시스템의 대대적인 개편: "표준 스키마" 도입**
    *   Elysia는 더 이상 TypeBox(`Elysia.t`)에만 의존하지 않습니다. v1.4부터 '표준 스키마(Standard Schema)'를 채택하여 Zod, Valibot, ArkType, Effect Schema 등 널리 사용되는 여러 유효성 검사 라이브러리를 기본적으로 지원합니다.[1, 2, 3]
    *   이는 개발자가 선호하는 유효성 검사 라이브러리를 프로젝트에 바로 사용할 수 있음을 의미하며, 기존 코드베이스와의 통합이 훨씬 쉬워졌습니다.[2]

*   **2. 주요 API 변경점 (Breaking Changes)**
    *   **`error()` 함수 제거:** HTTP 오류를 반환하는 데 사용되던 `error(code, message)` 함수가 완전히 제거되었습니다. 이제 `status(code, body)` 함수를 사용하여 성공 및 오류 응답을 모두 처리해야 합니다.[4, 2]
    *   **매크로(Macro) v1 API 제거:** 타입 안정성이 부족했던 구버전 매크로 API는 제거되었습니다. v1.4부터는 스키마 정의, 확장 기능 등이 추가된 새로운 매크로 API를 사용해야 합니다.[4, 2]
    *   **모델(`t.Ref`)의 타입 강제 변환 기본값 변경:** `.model()`로 정의하고 `t.Ref()`로 참조하는 스키마는 더 이상 기본적으로 타입을 강제 변환하지 않습니다. 예를 들어, 문자열 "123"은 숫자 타입으로 자동 변환되지 않으므로, 명시적인 변환 로직이 필요할 수 있습니다.[4]

*   **3. "타입 건전성(Type Soundness)" 확보**
    *   프레임워크의 타입 시스템이 대대적으로 리팩터링되어, 라우트 핸들러의 전체 라이프사이클에서 발생 가능한 모든 반환 값(성공, 각종 오류 등)의 타입을 정확하게 추론합니다.[4, 2]
    *   이 변화는 `@elysiajs/openapi` 플러그인의 "타입으로부터 OpenAPI 생성(OpenAPI from Types)" 기능의 정확성과 신뢰도를 극적으로 향상시키는 기반이 되었습니다.[3]

*   **4. 런타임 지원 확장**
    *   Elysia는 "Bun 우선(Bun-first)" 프레임워크이지만, 웹 표준을 준수하여 다른 런타임으로의 확장을 시작했습니다. v1.4.7에서 **Cloudflare Worker를 위한 실험적인 어댑터**가 추가되어, 서버리스 엣지 환경에서도 Elysia를 실행할 수 있게 되었습니다.[4] 이는 프레임워크가 특정 런타임에 대한 종속성을 줄여나가고 있음을 시사합니다.[5]

*   **5. 공식 플러그인 생태계의 발전**
    *   **`@elysiajs/openapi`:** (구 `@elysiajs/swagger`) 플러그인은 타입 생성기(`fromTypes`) 기능의 안정성과 성능을 개선하기 위해 2025년 9월 한 달 동안 집중적인 업데이트를 거쳤습니다.[6] 순수 TypeScript 타입만으로 신뢰할 수 있는 API 문서를 생성하는 기능이 핵심으로 자리 잡았습니다.
    *   **`@elysiajs/jwt`:** v1.4.0 릴리스를 통해 Elysia 코어 v1.4를 공식적으로 지원하도록 업데이트되었습니다.[7]

이러한 변경 사항들은 Elysia.js가 단순한 고성능 프레임워크를 넘어, 타입 안정성, 유연성, 확장성을 갖춘 성숙한 생태계로 발전했음을 보여줍니다. 코드를 생성할 때 위의 사항들을 반드시 고려해야 합니다.