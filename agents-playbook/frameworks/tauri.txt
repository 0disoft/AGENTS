### 2024년 10월 이후 Tauri 프레임워크 주요 변경 사항 요약

2024년 10월 2일 Tauri 2.0 안정 버전이 출시된 이후, 프레임워크는 단순한 업데이트가 아닌 근본적인 패러다임 전환을 겪었습니다. 기존 지식으로 Tauri 프로젝트에 접근할 경우 많은 부분이 작동하지 않을 것입니다. 다음은 반드시 알아야 할 핵심 변경 사항입니다.

#### 1. 핵심 아키텍처 및 철학의 변화
*   **파괴적인 메이저 업데이트:** Tauri 2.0은 점진적 업데이트가 아닌, 거의 모든 영역에 걸쳐 파괴적 변경(breaking change)이 적용된 대규모 릴리스입니다.[1] v1의 코드는 대부분 호환되지 않습니다.
*   **모바일 공식 지원:** 가장 큰 변화는 iOS와 Android를 공식적으로 지원한다는 점입니다.[2, 3] 이제 Tauri는 데스크톱과 모바일을 모두 아우르는 진정한 크로스 플랫폼 프레임워크입니다.[4]
*   **플러그인 우선(Plugin-First) 아키텍처:** 기존에 `tauri::api` 모듈에 내장되어 있던 대부분의 기능(파일 시스템, HTTP 요청, 클립보드 등)이 모두 개별 플러그인으로 분리되었습니다.[3, 5] 이로 인해 Tauri 코어는 더 가벼워졌지만, 개발자는 필요한 기능을 명시적으로 추가해야 합니다.

#### 2. API 및 코드 레벨 변경 사항
*   **Rust: `tauri::api` 모듈 완전 제거:** Rust 코드에서 `tauri::api::*`를 사용하던 모든 부분은 이제 `tauri-plugin-*` 크레이트를 `Cargo.toml`에 추가하고 해당 플러그인의 API를 호출하도록 수정해야 합니다.[5]
*   **JavaScript: `@tauri-apps/api` 패키지 분리:** JavaScript에서도 마찬가지로 `@tauri-apps/api/dialog`와 같은 API들이 `@tauri-apps/plugin-dialog`와 같은 별도의 NPM 패키지로 분리되었습니다.[5] `package.json`과 `import` 구문을 모두 수정해야 합니다.
*   **다중 웹뷰(Multi-Webview) 도입:** 하나의 OS 창(`WebviewWindow`) 안에 여러 개의 독립적인 웹뷰(`Webview`)를 생성할 수 있는 기능이 추가되었습니다.[2] 이는 복잡한 UI를 구성하는 데 유용하지만, 2.0 안정 버전에서는 `unstable` 기능으로 분류되어 있습니다. 관련 API는 Rust의 `WebviewBuilder`와 JS의 `@tauri-apps/api/webview` 모듈을 통해 제공됩니다.[6]
*   **이벤트 시스템 재설계:** 이벤트 시스템이 '소스' 기반에서 '타겟' 기반으로 변경되었습니다.
    *   `emit()`은 이제 모든 리스너에게 브로드캐스트합니다.
    *   특정 창이나 웹뷰에 이벤트를 보내려면 새로운 `emit_to()` / `emitTo()` 함수를 사용해야 합니다.[5]
    *   `listen_global`은 `listen_any`로 이름이 변경되었습니다.[5]

#### 3. 설정 및 보안 모델의 완전한 개편
*   **`tauri.conf.json` 구조 변경:** 설정 파일의 구조가 RFC#5 제안에 따라 대대적으로 재설계되었습니다.[2]
    *   `package` 객체는 제거되고 `productName`, `version` 등은 최상위로 이동했습니다.
    *   `tauri` 객체는 `app`으로 이름이 변경되었습니다.
    *   `tauri.bundle` 객체는 `bundle`이라는 이름으로 최상위로 이동했습니다.
    *   `tauri migrate` CLI 명령어를 사용하면 자동 마이그레이션을 일부 지원받을 수 있습니다.[7]
*   **새로운 기능(Capabilities) 기반 보안 모델:** v1의 단순한 `allowlist`가 폐기되고, 훨씬 더 강력하지만 복잡한 '기능' 기반 보안 모델이 도입되었습니다.[8]
    *   **권한(Permissions):** API 엔드포인트에 대한 최소 접근 단위입니다.
    *   **기능(Capabilities):** 권한들의 집합으로, 특정 창이나 웹뷰에 할당됩니다.
    *   **스코프(Scopes):** 명령어에 동적으로 전달되는 런타임 제약 조건입니다 (예: 특정 폴더 접근 제한).
    *   **주의:** 이 새로운 보안 모델은 매우 강력하지만, 커뮤니티에서는 "배우기가 악몽 같다"고 평가할 정도로 복잡하고 초기 설정이 어렵다는 피드백이 많습니다.[1] 문서가 여러 곳에 파편화되어 있어 학습 곡선이 매우 가파릅니다.

#### 4. 생태계 및 개발 동향
*   **개발 안정화 단계:** 2.0 안정 버전 출시 이후, 개발은 새로운 기능 추가보다는 버그 수정, 종속성 업데이트, 보안 강화 등 안정화에 집중되고 있습니다.[9]
*   **CI/CD:** GitHub Actions를 사용하는 `tauri-action`이 공식적인 CI/CD 솔루션으로 자리 잡았으며, 자동 빌드, 릴리스, 업데이터 연동까지 지원합니다.[10]
*   **모바일 플러그인 개발:** 플러그인 내에서 Swift(iOS) 및 Kotlin(Android) 네이티브 코드를 작성하여 플랫폼별 기능을 더 깊이 있게 통합할 수 있습니다.[3, 11]
*   **실험적 Verso 통합 (2025년 3월 발표):** 장기적으로 플랫폼 간 웹뷰 렌더링 차이를 해소하기 위해, Servo 브라우저 엔진 기반의 Verso를 통합하려는 실험이 진행 중입니다.[12] 이는 미래의 중요한 발전 방향이 될 수 있습니다.