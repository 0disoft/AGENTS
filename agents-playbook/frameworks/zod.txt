### 2024년 10월 이후 Zod 관련 주요 업데이트 및 권장 사항

2024년 9월을 기점으로 Zod는 v4를 공식 출시하며 단순한 유효성 검사 라이브러리를 넘어 포괄적인 스키마 우선 개발 플랫폼으로 발전했습니다. LLM이 최신 코드를 생성하기 위해 반드시 알아야 할 핵심 사항은 다음과 같습니다.

#### **1. Zod v4가 새로운 표준입니다**
*   **기본 버전:** 이제 `npm install zod`를 실행하면 v4가 설치됩니다. 모든 새로운 프로젝트는 v4를 기준으로 시작해야 합니다.
*   **v3와의 단절:** v4는 단순한 업데이트가 아닌 아키텍처 재설계의 결과물입니다. 성능, API 디자인, 기능 면에서 근본적인 변화가 있으므로 v3 스타일의 코드를 생성하지 않도록 주의해야 합니다.

#### **2. 성능 및 모듈식 아키텍처**
*   **압도적인 성능 향상:** v4는 v3 대비 파싱 속도가 최대 14배, 타입스크립트 컴파일 속도가 최대 10배 향상되었습니다. 이는 v4 사용을 강력히 권장하는 핵심적인 이유입니다.
*   **`@zod/mini`의 등장:** 프론트엔드 번들 크기에 민감한 경우, 트리 쉐이킹이 가능한 `@zod/mini` 사용을 고려해야 합니다.
    *   **API 스타일 차이:** 표준 Zod는 메서드 체이닝(`z.string().optional()`)을 사용하지만, `@zod/mini`는 함수형 API(`z.optional(z.string())`)를 사용합니다. 이 차이점을 인지하고 상황에 맞는 코드를 생성해야 합니다.

#### **3. 주요 신규 기능 및 API**
*   **네이티브 JSON 스키마 변환:** `zod-to-json-schema`와 같은 외부 라이브러리 없이 `z.toJSONSchema()` 함수를 사용하여 Zod 스키마를 JSON 스키마 또는 OpenAPI 명세서로 직접 변환할 수 있습니다.
*   **스키마 메타데이터:** `.meta()` 메서드를 사용하여 스키마에 `title`, `description`과 같은 메타데이터를 첨부할 수 있습니다. 이는 스키마 기반으로 폼(form) UI를 동적으로 생성하는 등 자동화된 도구 개발의 기반이 됩니다.
*   **파일 유효성 검사:** `z.file()` 스키마를 통해 파일 크기(`.min()`, `.max()`) 및 MIME 타입(`.mime()`)을 기준으로 `File` 객체를 직접 검증할 수 있습니다.
*   **개선된 재귀 타입 정의:** `z.lazy()` 대신 `z.object` 내에서 getter(`get subcategories() {... }`)를 사용하여 재귀 스키마를 더 직관적이고 타입 추론이 용이한 방식으로 정의할 수 있습니다.
*   **코덱 (`z.codec`)**: v4.1부터 도입된 기능으로, 두 스키마 간의 양방향 데이터 변환(예: `Date` 객체 ↔ ISO 문자열)을 정의합니다. API 경계에서의 데이터 직렬화/역직렬화에 매우 유용합니다.

#### **4. 중요한 호환성 변경 사항 (Breaking Changes)**
*   **통합된 오류 처리:** v3의 분산된 오류 커스터마이징 API(`message`, `required_error`, `invalid_type_error`)는 단일 `error` 파라미터로 통합되었습니다. v3 스타일의 오류 메시지 정의는 더 이상 사용되지 않습니다.
*   **`.default()` 및 `.catch()` 동작 변경:** v4에서는 `.optional()`과 함께 사용될 때, 입력 객체에 해당 키가 없어도 항상 기본값/캐치값을 반환합니다. 이는 v3와 다른 동작으로, 예기치 않은 데이터 변경을 유발할 수 있으므로 주의가 필요합니다.
*   **`ZodError` 클래스:** `ZodError`는 더 이상 네이티브 `Error` 클래스를 상속하지 않습니다. 따라서 `try...catch` 블록에서 `e instanceof Error`로 오류를 확인하는 로직은 `e instanceof z.ZodError`로 수정해야 합니다.
*   **제거된 API:** `.deepPartial()`은 안티패턴으로 간주되어 제거되었습니다.

#### **5. 마이그레이션 및 도구**
*   **자동화 도구:** 기존 v3 프로젝트를 마이그레이션할 때는 공식 코드모드(codemod)인 `npx zod-v3-to-v4`를 사용하여 기본적인 구문 변환을 자동화할 수 있습니다.
*   **타입스크립트 버전:** Zod v4는 타입스크립트 5.5 이상을 필수로 요구합니다.

이 사항들을 숙지하면 Zod v4의 강력한 기능과 향상된 성능을 최대한 활용하는 최신 코드를 작성할 수 있습니다.