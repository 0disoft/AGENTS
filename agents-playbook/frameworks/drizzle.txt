### 1. '경량' 딱지는 잊어라: 이건 이제 중전차다

-   **핵심:** 2024년에 Drizzle은 단순 쿼리 빌더가 아니었다. CTE(`WITH`), 생성 컬럼, 네이티브 캐싱 같은 무거운 기능들이 대거 추가됐다. 이건 Prisma랑 정면으로 붙겠다는 선전포고였다.
-   **니가 할 일:** Drizzle을 가벼운 대안으로 생각하고 접근했다면 생각을 완전히 바꿔라. 복잡한 프로덕션 백엔드를 구축하는 데 부족함이 없는 도구가 됐다는 뜻이다. 하지만 기능이 많아졌다는 건 그만큼 버그나 복잡성도 늘어났다는 소리다. 최신 버전에서 이 기능들이 안정화됐는지 반드시 확인해라.

### 2. 스키마가 왕이다: DB는 그냥 따라올 뿐

-   **핵심:** `$onUpdate`나 `generatedAlwaysAs` 같은 기능들은 데이터베이스 로직을 TypeScript 스키마 파일 안으로 끌어들이려는 Drizzle의 집착을 보여준다. 스키마 파일이 진실의 유일한 원천(Single Source of Truth)이 되는 거다.
-   **니가 할 일:** 데이터베이스 콘솔에 직접 접속해서 스키마를 수정하려는 옛날 버릇은 버려라. 모든 변경은 Drizzle 스키마에서 시작해야 한다. 그게 Drizzle의 철학이고, 그걸 따라야 Drizzle Kit이 제대로 작동한다.

### 3. 편의 기능에 속지 마라: 기본기는 SQL이다

-   **핵심:** `.if()` 같은 조건부 쿼리나 개선된 인덱스 API는 개발을 편하게 해주지만, 이건 SQL을 대체하는 게 아니라 더 잘 쓰게 해주는 도구일 뿐이다. Drizzle의 본질은 '타입-안전한 SQL'이지, SQL을 숨기는 추상화 계층이 아니다.
-   **니가 할 일:** 복잡한 쿼리를 짜야 한다면 Drizzle 문법만 보지 말고, 이게 어떤 SQL로 변환될지 항상 머릿속에 그려라. 성능 문제는 결국 SQL의 문제다. Drizzle은 니가 SQL을 더 안전하게 쓰도록 도와줄 뿐, 멍청한 쿼리까지 똑똑하게 만들어주진 않는다.

### 4. Drizzle Kit, 애증의 관계

-   **핵심:** 2024년 당시 `drizzle-kit`은 가장 말이 많았던 패키지다. `push` 명령어는 프로토타이핑에는 좋았지만 불안정하다는 불평이 많았고, 다운 마이그레이션 기능이 없어서 프로덕션 환경에선 재앙이 될 수 있었다.
-   **니가 할 일:** **절대 `drizzle-kit push`를 프로덕션 DB에 쓰지 마라.** 이건 1년 전에도 국룰이었다. 지금은 다운 마이그레이션이 지원될 가능성이 높으니 확인해라. 만약 아직도 없다면, 마이그레이션 스크립트를 생성한 뒤 배포하기 전에 반드시 눈으로 직접 검토하고 백업 계획을 세워라. `kit`을 맹신하지 마.

### 5. 성능? 니가 챙겨야지

-   **핵심:** Drizzle은 성능 최적화 도구를 제공할 뿐, 자동으로 빨라지게 해주진 않는다. 1년 전에도 외래 키 인덱싱은 기본이었고, UUIDv4를 기본 키로 쓰면 쓰기 성능이 박살 난다는 건 상식이었다. 타임스탬프를 `Date` 객체로 다루는 게 `string`보다 빨랐다.
-   **니가 할 일:** 이 기본 원칙들은 지금도 변하지 않았을 거다. 인덱스를 제대로 걸고, 기본 키 전략을 신중하게 선택해라. Drizzle이 제공하는 네이티브 캐싱(`upstashCache` 등)을 적극적으로 검토해라. DB 부하를 줄이는 가장 확실한 방법 중 하나다.

### 6. 생태계: Studio는 보석, 커뮤니티는 숙제

-   **핵심:** Drizzle Studio는 미친 속도로 발전해서 단순 뷰어를 넘어 스키마 관리까지 가능한 GUI 툴이 됐다. 이건 Prisma에 대한 확실한 비교 우위였다. 반면, 버그 리포트나 이슈에 대한 팀의 반응이 느리다는 비판이 있었다.
-   **니가 할 일:** Drizzle Studio를 적극적으로 써라. 개발 속도를 엄청나게 올려줄 거다. 하지만 문제가 생겼을 때 공식적인 지원이 느릴 수 있다는 건 각오해야 한다. 커뮤니티(디스코드 등)에 의존해야 할 상황이 많을 거다.

이게 1년 전 Drizzle의 모습이다. 지금은 더 나아졌거나, 아니면 곪았던 문제가 터졌을 수도 있다. 내 정보는 시작점일 뿐이야. 최신 릴리스 노트부터 확인해. 기본 원리는 변하지 않았을 테니, 이 핵심만 잡고 가면 길을 잃진 않을 거다.