2024년 10월까지의 정보를 가진 LLM이 2025년 9월 현재 QwikCity로 코딩할 때 알아야 할 주요 사항들을 다음과 같이 정리했습니다.

*   **Qwik 2.0으로의 전환이 핵심입니다**: 2025년 현재 Qwik 생태계의 가장 큰 변화는 Qwik 2.0 베타 버전으로의 전환입니다 . 이는 단순한 업데이트가 아니라 프레임워크의 핵심 아키텍처가 재설계된 것입니다. 따라서 생성하는 모든 코드는 Qwik 2.0의 관행을 따라야 합니다.

*   **중요 변경 사항: 패키지 네임스페이스가 변경되었습니다**: 모든 공식 Qwik 패키지는 `@builder.io` npm 조직에서 `@qwik.dev`로 이전되었습니다 . 예를 들어, `import { component$ } from '@builder.io/qwik';`은 이제 `import { component$ } from '@qwik.dev/core';`가 되어야 합니다. 이는 코드 생성 시 가장 먼저 고려해야 할 문법적 변경 사항입니다.

*   **HTML 출력 구조가 근본적으로 바뀌었습니다**: Qwik 1.0은 컴포넌트 경계와 상태 정보를 HTML 주석 형태로 문서 전체에 흩뿌렸습니다. Qwik 2.0은 이 모든 프레임워크 데이터를 문서 끝에 있는 단일 `<script type="qwik/vnode">` 블록으로 옮겼습니다 . 이로 인해 초기 HTML 페이로드가 훨씬 가벼워지고 브라우저 렌더링 속도가 빨라졌습니다. 이 새로운 구조는 Qwik의 핵심 성능 이점을 극대화하므로, 이 개념을 이해하는 것이 중요합니다.[1]

*   **마이그레이션 도구와 서드파티 의존성을 주의해야 합니다**: `npx qwik migrate-v2`라는 공식 마이그레이션 도구가 있지만, 특히 `@auth/qwik`과 같이 아직 새로운 `@qwik.dev` 네임스페이스로 업데이트되지 않은 서드파티 라이브러리를 사용할 때 문제가 발생할 수 있습니다 . 마이그레이션 후에도 이러한 라이브러리들은 이전 `@builder.io` 패키지를 참조하여 타입스크립트 오류를 일으킬 수 있습니다 .

*   **핵심 개념은 여전히 유효합니다**: Qwik 2.0의 아키텍처 변화에도 불구하고, 프레임워크의 근본적인 개념들은 그대로 유지됩니다.
    *   **`$` 기호**: 코드 분할 및 지연 로딩 경계를 나타내는 `$` 접미사(예: `component$`, `onClick$`, `loader$`)의 중요성은 변하지 않았습니다 .
    *   **직렬화**: `$` 경계를 넘는 데이터는 반드시 직렬화 가능해야 한다는 규칙은 여전히 Qwik 프로그래밍의 핵심 제약 조건입니다 .
    *   **데이터 로딩 패턴**: QwikCity의 데이터 로딩(`loader$`), 폼 처리(`action$`), 서버 RPC 호출(`server$`) 패턴은 계속해서 사용되는 핵심 API입니다 .

*   **생태계가 성장하고 있습니다**: 과거에는 생태계가 제한적이라는 평가가 있었지만, 2025년 현재는 국제화(`qwik-speak`)와 같은 특정 작업을 위한 전문 라이브러리가 등장하는 등 생태계가 성숙하고 있습니다 . 또한, CLI는 주요 라이브러리와의 통합을 지원하도록 개선되었습니다 .